// see file content
cat data2.txt
17
5 10 15 20 25 30 35 1 2 3 4 5 6 7 8 9 0
8
* * 9 * 100 * * 1

//compile:
gcc -g run_test.c heap.c
//run:
valgrind --leak-check=full  --show-leak-kinds=all ./a.out

==766== Memcheck, a memory error detector
==766== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==766== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==766== Command: ./a.out
==766==
This program will create a max-heap and perform operations on it based on data from a file.

Enter the filename: data2.txt
in function make_heap, in DEBUG MODE, printing array BEFORE it gets turned into a heap :
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     15,     20,     25,     30,     35,      1,      2,      3,      4,      5,      6,      7,      8,      9,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 7.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     15,     20,     25,     30,     35,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 6.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     15,     20,     25,     30,     35,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 5.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     15,     20,     25,     30,     35,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 4.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     15,     20,     25,     30,     35,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 3.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     15,     20,     25,     30,     35,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 2.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     10,     35,     20,     25,     30,     15,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 1.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:            5,     25,     35,     20,     10,     30,     15,      9,      2,      3,      4,      5,      6,      7,      8,      1,      0,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 0.
Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:           35,     25,     30,     20,     10,      6,     15,      9,      2,      3,      4,      5,      5,      7,      8,      1,      0,

Heap:  size: 17, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,     16,
values:           35,     25,     30,     20,     10,      6,     15,      9,      2,      3,      4,      5,      5,      7,      8,      1,      0,

Operation number 1, string: *
removed:     35
Heap:  size: 16, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,
values:           30,     25,     15,     20,     10,      6,      8,      9,      2,      3,      4,      5,      5,      7,      0,      1,

Operation number 2, string: *
removed:     30
Heap:  size: 15, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,
values:           25,     20,     15,      9,     10,      6,      8,      1,      2,      3,      4,      5,      5,      7,      0,

Operation number 3, string: 9
add:           9
Heap:  size: 16, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,
values:           25,     20,     15,      9,     10,      6,      8,      9,      2,      3,      4,      5,      5,      7,      0,      1,

Operation number 4, string: *
removed:     25
Heap:  size: 15, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,
values:           20,     10,     15,      9,      4,      6,      8,      9,      2,      3,      1,      5,      5,      7,      0,

Operation number 5, string: 100
add:         100
Heap:  size: 16, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,     15,
values:          100,     20,     15,     10,      4,      6,      8,      9,      2,      3,      1,      5,      5,      7,      0,      9,

Operation number 6, string: *
removed:    100
Heap:  size: 15, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,
values:           20,     10,     15,      9,      4,      6,      8,      9,      2,      3,      1,      5,      5,      7,      0,

Operation number 7, string: *
removed:     20
Heap:  size: 14, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,
values:           15,     10,      8,      9,      4,      6,      7,      9,      2,      3,      1,      5,      5,      0,

Operation number 8, string: 1
add:           1
Heap:  size: 15, capacity : 17
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,     11,     12,     13,     14,
values:           15,     10,      8,      9,      4,      6,      7,      9,      2,      3,      1,      5,      5,      0,      1,

==766==
==766== HEAP SUMMARY:
==766==     in use at exit: 0 bytes in 0 blocks
==766==   total heap usage: 5 allocs, 5 frees, 6,684 bytes allocated
==766==
==766== All heap blocks were freed -- no leaks are possible
==766==
==766== For lists of detected and suppressed errors, rerun with: -s
==766== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)