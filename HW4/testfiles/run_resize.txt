// see file content
cat resize.txt
2
10 40
9
5 -6 85 1 2 3 4 5 6

//compile:
gcc -g run_test.c heap.c
//run:
valgrind --leak-check=full ./a.out
==173== Memcheck, a memory error detector
==173== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==173== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==173== Command: ./a.out
==173==
This program will create a max-heap and perform operations on it based on data from a file.

Enter the filename: resize.txt
in function make_heap, in DEBUG MODE, printing array BEFORE it gets turned into a heap :
Heap:  size: 2, capacity : 2
indexes:           0,      1,
values:           10,     40,

in function make_heap, in DEBUG MODE, printing array after sink_down at index 0.
Heap:  size: 2, capacity : 2
indexes:           0,      1,
values:           40,     10,

Heap:  size: 2, capacity : 2
indexes:           0,      1,
values:           40,     10,

Operation number 1, string: 5
add:           5

resizing
Heap:  size: 3, capacity : 4
indexes:           0,      1,      2,
values:           40,     10,      5,

Operation number 2, string: -6
add:          -6
Heap:  size: 4, capacity : 4
indexes:           0,      1,      2,      3,
values:           40,     10,      5,     -6,

Operation number 3, string: 85
add:          85

resizing
Heap:  size: 5, capacity : 8
indexes:           0,      1,      2,      3,      4,
values:           85,     40,      5,     -6,     10,

Operation number 4, string: 1
add:           1
Heap:  size: 6, capacity : 8
indexes:           0,      1,      2,      3,      4,      5,
values:           85,     40,      5,     -6,     10,      1,

Operation number 5, string: 2
add:           2
Heap:  size: 7, capacity : 8
indexes:           0,      1,      2,      3,      4,      5,      6,
values:           85,     40,      5,     -6,     10,      1,      2,

Operation number 6, string: 3
add:           3
Heap:  size: 8, capacity : 8
indexes:           0,      1,      2,      3,      4,      5,      6,      7,
values:           85,     40,      5,      3,     10,      1,      2,     -6,

Operation number 7, string: 4
add:           4

resizing
Heap:  size: 9, capacity : 16
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,
values:           85,     40,      5,      4,     10,      1,      2,     -6,      3,

Operation number 8, string: 5
add:           5
Heap:  size: 10, capacity : 16
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,
values:           85,     40,      5,      4,     10,      1,      2,     -6,      3,      5,

Operation number 9, string: 6
add:           6
Heap:  size: 11, capacity : 16
indexes:           0,      1,      2,      3,      4,      5,      6,      7,      8,      9,     10,
values:           85,     40,      5,      4,     10,      1,      2,     -6,      3,      5,      6,

==173==
==173== HEAP SUMMARY:
==173==     in use at exit: 0 bytes in 0 blocks
==173==   total heap usage: 8 allocs, 8 frees, 6,736 bytes allocated
==173==
==173== All heap blocks were freed -- no leaks are possible
==173==
==173== For lists of detected and suppressed errors, rerun with: -s
==173== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)